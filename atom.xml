<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>后台服务开发</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://servercoder.com/"/>
  <updated>2018-01-08T14:19:13.000Z</updated>
  <id>http://servercoder.com/</id>
  
  <author>
    <name>码龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://servercoder.com/2018/01/03/byte-order/"/>
    <id>http://servercoder.com/2018/01/03/byte-order/</id>
    <published>2018-01-03T15:00:16.588Z</published>
    <updated>2018-01-08T14:19:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我是怎么处理大小端及网络字节序的？"><a href="#我是怎么处理大小端及网络字节序的？" class="headerlink" title="我是怎么处理大小端及网络字节序的？"></a>我是怎么处理大小端及网络字节序的？</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最开始接触c语言时，总会花很多精力去记各种操作符的优先级。后来才发现，实际开发根本就不用记。自此这么多年，除了加减乘除这种小学生都知道的优先级，我基本都是用括号搞定优先级。</p>
<p>同样，不同语言的字节序都不尽相同，比如c++大部分平台是小端存储的（c++的字节序与处理器有关系，具体大小端与编译器对应关系见参考文档1），java就是采用大端存储，c#似乎是小端存储（c#我写的少，有心人可以帮忙确认下）。在写跨语言或者跨平台的程序时，字节序的转换就不得不考虑了。</p>
<h2 id="大端小端转换"><a href="#大端小端转换" class="headerlink" title="大端小端转换"></a>大端小端转换</h2><p>关于大端小端的由来，可以看看《格列佛游记》，我就不转载了。<br>大端：数据的高位存储在低地址中，低位存储在高地址中。<br>小端：数据的低位存储在高地址中，高位存储在低地址中。</p>
<p>举个例子，数据0x12345678，占4个字节，分别是0x12、0x34、0x56、0x78。假设内存起始地址是0x80000000。<br>对于小端程序来说，0x80000000存放0x78，0x80000001存放0x56，0x80000002存放0x34，0x80000003存放0x12。<br>而对于大端程序来说，0x80000000存放0x12，0x80000001存放0x34，0x80000002存放0x56，0x80000003存放0x78。</p>
<p>这里要说明的是，大小端只对多字节数据类型有影响，对于单字节类型的数组、字符串，并没有什么影响。另外如果是多个多字节数据放在一起，顺序依然不会变，只是每个多字节数据区分大端还是小端罢了。</p>
<p>所以，一般情况下，大小端字节序转换规则如下：</p>
<ol>
<li>单字节数据或数组，不需要转换</li>
<li>少于或等于4字节的长整型，前后互换就行了。</li>
</ol>
<p>还有三种特殊情况：</p>
<ol>
<li>对于8字节的长整型int64来说，并不是前后字节互换，而是先将高32位和低32位互换，然后，将这两个int32内部字节位互换。</li>
<li>对于float类型来说，同样是前后字节对换。</li>
<li>尽管double是8字节的，但是其转换方式和float一样，也是前后字节兑换。</li>
</ol>
<p>具体代码可参考poco，我就不贴出来了，参阅参考文献2。</p>
<h2 id="怎么判断大端还是小端"><a href="#怎么判断大端还是小端" class="headerlink" title="怎么判断大端还是小端"></a>怎么判断大端还是小端</h2><p>可能很多毕业生找工作时都会被问到如何判断当前系统是大端还是小端。知道原理后，实现起来其实很简单。定义一个多字节类型，然后判断不同地址的值，看看高地址存放的是高位数据还是低位数据，就能轻易区分当前是大端还是小端了。</p>
<p>实际工作中，就没必要这样判断了。因为不同平台上大小端是提前就知道的。如果使用poco库，完成可以依赖其Platform.h中的宏定义，里面还包含了我没有见过的平台。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__ALPHA) || defined(__alpha) || defined(__alpha__) || defined(_M_ALPHA)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_ALPHA</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(i386) || defined(__i386) || defined(__i386__) || defined(_M_IX86) || defined(EMSCRIPTEN) || defined(__EMSCRIPTEN__)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_IA32</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_IA64) || defined(__IA64__) || defined(__ia64__) || defined(__ia64) || defined(_M_IA64)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_IA64</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">if</span> defined(hpux) || defined(_hpux)</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__x86_64__) || defined(_M_X64)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_AMD64</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__mips__) || defined(__mips) || defined(__MIPS__) || defined(_M_MRX000)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_MIPS</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">if</span> defined(POCO_OS_FAMILY_WINDOWS)</span></div><div class="line">		<span class="comment">// Is this OK? Supports windows only little endian??</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">elif</span> defined(__MIPSEB__) || defined(_MIPSEB) || defined(__MIPSEB)</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">elif</span> defined(__MIPSEL__) || defined(_MIPSEL) || defined(__MIPSEL)</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">		<span class="meta">#<span class="meta-keyword">error</span> <span class="meta-string">"MIPS but neither MIPSEL nor MIPSEB?"</span></span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__hppa) || defined(__hppa__)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_HPPA</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__PPC) || defined(__POWERPC__) || defined(__powerpc) || defined(__PPC__) || \</span></div><div class="line">      defined(__powerpc__) || defined(__ppc__) || defined(__ppc) || defined(_ARCH_PPC) || defined(_M_PPC)</div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_PPC</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">if</span> defined(__BYTE_ORDER__) &amp;&amp; (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_POWER) || defined(_ARCH_PWR) || defined(_ARCH_PWR2) || defined(_ARCH_PWR3) || \</span></div><div class="line">      defined(_ARCH_PWR4) || defined(__THW_RS6000)</div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_POWER</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__sparc__) || defined(__sparc) || defined(sparc)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_SPARC</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__arm__) || defined(__arm) || defined(ARM) || defined(_ARM_) || defined(__ARM__) || defined(_M_ARM)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_ARM</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">if</span> defined(__ARMEB__)</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__arm64__) || defined(__arm64)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_ARM64</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">if</span> defined(__ARMEB__)</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">elif</span> defined(__BYTE_ORDER__) &amp;&amp; defined(__ORDER_BIG_ENDIAN__) &amp;&amp; __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__m68k__)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_M68K</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__s390__)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_S390</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__sh__) || defined(__sh) || defined(SHx) || defined(_SHX_)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_SH</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">if</span> defined(__LITTLE_ENDIAN__) || (POCO_OS == POCO_OS_WINDOWS_CE)</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined (nios2) || defined(__nios2) || defined(__nios2__)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_NIOS2</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">if</span> defined(__nios2_little_endian) || defined(nios2_little_endian) || defined(__nios2_little_endian__)</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__AARCH64EL__)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_AARCH64</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_LITTLE_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__AARCH64EB__)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH POCO_ARCH_AARCH64</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> POCO_ARCH_BIG_ENDIAN 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h2 id="如何将本地字节序转成网络字节序呢？"><a href="#如何将本地字节序转成网络字节序呢？" class="headerlink" title="如何将本地字节序转成网络字节序呢？"></a>如何将本地字节序转成网络字节序呢？</h2><p>本文最开始我提到，如果我们写代码时，不用考虑当前是大端还是小端，就方便极了。<br>poco同样提供了封装：fromNetwork和toNetwork，可以在ByteOrder.h中找到。如果你的项目中没有使用poco，又不想因为大小端问题引入一个库，那问题也不大，无非就是根据大小端情况封装fromNetwork和toNetwork而已，具体实现就直接参考poco的实现就行了。</p>
<p>参考文档：</p>
<ol>
<li><a href="https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/Platform.h#L137" target="_blank" rel="external">https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/Platform.h#L137</a></li>
<li><a href="https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/ByteOrder.h" target="_blank" rel="external">https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/ByteOrder.h</a></li>
</ol>
<hr>
<p>本文链接：<a href="http://servercoder.com/2018/01/03/byte-order/">http://servercoder.com/2018/01/03/byte-order/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我是怎么处理大小端及网络字节序的？&quot;&gt;&lt;a href=&quot;#我是怎么处理大小端及网络字节序的？&quot; class=&quot;headerlink&quot; title=&quot;我是怎么处理大小端及网络字节序的？&quot;&gt;&lt;/a&gt;我是怎么处理大小端及网络字节序的？&lt;/h2&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨平台开发时，我们为什么不封装http请求的sdk</title>
    <link href="http://servercoder.com/2017/12/11/sdk-without-http/"/>
    <id>http://servercoder.com/2017/12/11/sdk-without-http/</id>
    <published>2017-12-11T11:09:42.984Z</published>
    <updated>2017-12-11T11:09:42.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要封装sdk"><a href="#为什么要封装sdk" class="headerlink" title="为什么要封装sdk"></a>为什么要封装sdk</h2><p>相信很多开发团队都同时需要开发各种平台的客户端，有android、ios，甚至是pc版客户端。于是，怎么尽可能复用同一套业务代码，成了很多开发讨论的话题。</p>
<p>比如，开发照片处理软件，核心的处理算法一定都是c++写的，除了计算效率高之外，算法的实现也肯定是很复杂的，不可能每个客户端都用各自编程语言实现一套。这样带来的好处有：</p>
<ol>
<li>代码量更少，开发效率高。</li>
<li>减少了不同语言实现时产生相同bug的可能。</li>
<li>减少了因不同语言开发人员开发水平不一致，出现各种bug的可能。</li>
<li>后期维护更方便。</li>
<li>测试更方便。</li>
</ol>
<p>同样地，当你引入一个新的通信库时，如grpc。它提供了不同语言的实现，java、go、c++。如果每个语言都基于grpc封装一套通信逻辑，意味着每个语言的人都要了解grpc的使用，如果要求高一点，我们对引入的第三方库一定要读懂核心代码，那耗费的时间就更多了。更别说后期维护的时间。</p>
<h2 id="什么时候要封装sdk"><a href="#什么时候要封装sdk" class="headerlink" title="什么时候要封装sdk"></a>什么时候要封装sdk</h2><p>所以，我们到底什么时候该封装sdk呢？我认为出现下面几种情况，你可能就得考虑封装sdk了。</p>
<ol>
<li>业务逻辑复杂，并且多平台客户端都需要。</li>
<li>复杂的算法。</li>
<li>网络通信中间件。比如我上面提到的grpc,还有一些基于tcp数据的封装、发送、解析。</li>
<li>多个项目可能会使用的公共模块。</li>
</ol>
<h2 id="http请求，是否要封装？"><a href="#http请求，是否要封装？" class="headerlink" title="http请求，是否要封装？"></a>http请求，是否要封装？</h2><p>我们常说的一句话，架构设计不能脱离业务。诚然，我们很多时候的技术选型都是在权衡，权衡开发成本，权衡产品状态，权衡现有开发人员的水平等等。有的时候具体问题还是要具体分析。<br>上面说了那么多什么时候要封装sdk。那对于提供http接口的服务，有必要封装sdk吗？<br>我认为如果只是封装http的请求和响应，而不包含其他业务逻辑时，必要性不大，原因如下：</p>
<ol>
<li>如果将http的请求和相应封装成sdk，我们看看是否提高了开发效率。首先确实只有一处公共代码发起http请求和响应，但为此，需要为各个客户端封装接口，以便能调用sdk。比如，c#需要封装托管c++或是提供c语言形式地接口，然后c#在以invoke的方式调用。比如，java和andriod，我们需要封装jni接口。其他语言就更别说了，能间接调用c接口，但都要简单的封装。于是，后期我们每增加一个接口都需要修改sdk，需要修改调用接口。这样做提高效率了吗？有人可能会说，sdk中发起http请求和相应的代码复用了，我减少了开发和维护成本呢。</li>
<li>但不要忘记了，各个语言都有非常成熟且经过充分验证的http client api。也就是说，各个高级开发语言（除了c++）不需要额外的开发精力，我们就能实现稳定的http调用。</li>
<li>对于http服务来说，如果设计人员的水平还行的话，我们不可能需要频繁修改接口，更多的是新增接口。而对于新增接口而言，我们并没有节省什么开发成本。</li>
<li>你能保证你封装的接口一次性交付么？</li>
</ol>
<h2 id="封装sdk可能带来的问题"><a href="#封装sdk可能带来的问题" class="headerlink" title="封装sdk可能带来的问题"></a>封装sdk可能带来的问题</h2><p>再说远一点，并不是说为了增加复用，提高开发效率就一定要封装sdk。如果是服务端开发人员，如果多个项目都包含同一份sdk，一旦该sdk出了问题，就意味着所有相关项目都需要重新升级部署。<br>这个时候就该考虑服务化了，如果该sdk相关逻辑在一个单独的服务里面，我们只需要更新该服务就行，这样相关项目与那段逻辑就实现了解耦。沈剑的这篇文章<a href="https://mp.weixin.qq.com/s/mjWCuYYbFs16esvkwZ-LKw" target="_blank" rel="external">《小小的公共库，大大的耦合，你痛过吗？》</a>，大家可以关注下。</p>
<hr>
<p>本文链接：<a href="http://servercoder.com/2017/12/11/sdk-without-http/">http://servercoder.com/2017/12/11/sdk-without-http/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要封装sdk&quot;&gt;&lt;a href=&quot;#为什么要封装sdk&quot; class=&quot;headerlink&quot; title=&quot;为什么要封装sdk&quot;&gt;&lt;/a&gt;为什么要封装sdk&lt;/h2&gt;&lt;p&gt;相信很多开发团队都同时需要开发各种平台的客户端，有android、ios，甚至是pc
    
    </summary>
    
    
  </entry>
  
</feed>
